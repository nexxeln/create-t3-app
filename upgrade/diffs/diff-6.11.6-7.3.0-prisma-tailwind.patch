diff --git a/.env.example b/.env.example
index 96d6793..cb15881 100644
--- a/.env.example
+++ b/.env.example
@@ -5,6 +5,5 @@
 # If you are cloning this repo, create a copy of this file named `.env` and populate it with your secrets.
 
 # When adding additional env variables, the schema in /env/schema.mjs should be updated accordingly
-
 # Prisma
 DATABASE_URL=file:./db.sqlite
diff --git a/.eslintrc.json b/.eslintrc.json
index 4cc0a95..82671df 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -1,4 +1,15 @@
 {
+  "overrides": [
+    {
+      "extends": [
+        "plugin:@typescript-eslint/recommended-requiring-type-checking"
+      ],
+      "files": ["*.ts", "*.tsx"],
+      "parserOptions": {
+        "project": "tsconfig.json"
+      }
+    }
+  ],
   "parser": "@typescript-eslint/parser",
   "parserOptions": {
     "project": "./tsconfig.json"
diff --git a/README.md b/README.md
index cc40526..fba19ed 100644
--- a/README.md
+++ b/README.md
@@ -25,4 +25,4 @@ You can check out the [create-t3-app GitHub repository](https://github.com/t3-os
 
 ## How do I deploy this?
 
-Follow our deployment guides for [Vercel](https://create.t3.gg/en/deployment/vercel) and [Docker](https://create.t3.gg/en/deployment/docker) for more information.
+Follow our deployment guides for [Vercel](https://create.t3.gg/en/deployment/vercel), [Netlify](https://create.t3.gg/en/deployment/netlify) and [Docker](https://create.t3.gg/en/deployment/docker) for more information.
diff --git a/package.json b/package.json
index 40bc092..dd6bb7f 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
@@ -10,30 +10,30 @@
     "start": "next start"
   },
   "dependencies": {
-    "@prisma/client": "^4.5.0",
+    "@prisma/client": "^4.8.0",
     "next": "13.1.1",
     "react": "18.2.0",
     "react-dom": "18.2.0",
-    "zod": "^3.18.0"
+    "zod": "^3.20.2"
   },
   "devDependencies": {
-    "@types/node": "^18.0.0",
+    "@types/node": "^18.11.18",
     "@types/prettier": "^2.7.2",
-    "@types/react": "^18.0.14",
-    "@types/react-dom": "^18.0.5",
-    "@typescript-eslint/eslint-plugin": "^5.33.0",
-    "@typescript-eslint/parser": "^5.33.0",
+    "@types/react": "^18.0.26",
+    "@types/react-dom": "^18.0.10",
+    "@typescript-eslint/eslint-plugin": "^5.47.1",
+    "@typescript-eslint/parser": "^5.47.1",
     "autoprefixer": "^10.4.7",
-    "eslint": "^8.26.0",
+    "eslint": "^8.30.0",
     "eslint-config-next": "13.1.1",
     "postcss": "^8.4.14",
     "prettier": "^2.8.1",
     "prettier-plugin-tailwindcss": "^0.2.1",
-    "prisma": "^4.5.0",
+    "prisma": "^4.8.0",
     "tailwindcss": "^3.2.0",
-    "typescript": "^4.8.4"
+    "typescript": "^4.9.4"
   },
   "ct3aMetadata": {
-    "initVersion": "6.11.6"
+    "initVersion": "7.3.0"
   }
 }
diff --git a/prisma/schema.prisma b/prisma/schema.prisma
index 06dc8cd..6d43fd2 100644
--- a/prisma/schema.prisma
+++ b/prisma/schema.prisma
@@ -2,16 +2,16 @@
 // learn more about it in the docs: https://pris.ly/d/prisma-schema
 
 generator client {
-  provider = "prisma-client-js"
+    provider = "prisma-client-js"
 }
 
 datasource db {
-  provider = "sqlite"
-  url      = env("DATABASE_URL")
+    provider = "sqlite"
+    url      = env("DATABASE_URL")
 }
 
 model Example {
-  id        String   @id @default(cuid())
-  createdAt DateTime @default(now())
-  updatedAt DateTime @updatedAt
+    id        String   @id @default(cuid())
+    createdAt DateTime @default(now())
+    updatedAt DateTime @updatedAt
 }
diff --git a/src/env/client.mjs b/src/env/client.mjs
index 30958cb..0f29b85 100644
--- a/src/env/client.mjs
+++ b/src/env/client.mjs
@@ -1,5 +1,16 @@
 // @ts-check
-import { clientEnv, clientSchema } from "./schema.mjs";
+import { clientSchema } from "./schema.mjs";
+
+/**
+ * You can't destruct `process.env` as a regular object, so we do
+ * a workaround. This is because Next.js evaluates this at build time,
+ * and only used environment variables are included in the build.
+ * @type {{ [key: string]: string | undefined; }}
+ */
+let clientEnv = {};
+Object.keys(clientSchema.shape).forEach(
+  (key) => (clientEnv[key] = process.env[key]),
+);
 
 const _clientEnv = clientSchema.safeParse(clientEnv);
 
diff --git a/src/env/schema.mjs b/src/env/schema.mjs
index 45d3935..fb73299 100644
--- a/src/env/schema.mjs
+++ b/src/env/schema.mjs
@@ -18,13 +18,3 @@ export const serverSchema = z.object({
 export const clientSchema = z.object({
   // NEXT_PUBLIC_CLIENTVAR: z.string(),
 });
-
-/**
- * You can't destruct `process.env` as a regular object, so you have to do
- * it manually here. This is because Next.js evaluates this at build time,
- * and only used environment variables are included in the build.
- * @type {{ [k in keyof z.infer<typeof clientSchema>]: z.infer<typeof clientSchema>[k] | undefined }}
- */
-export const clientEnv = {
-  // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,
-};
diff --git a/src/env/server.mjs b/src/env/server.mjs
index 736e3a6..6a8cc9d 100644
--- a/src/env/server.mjs
+++ b/src/env/server.mjs
@@ -6,7 +6,18 @@
 import { serverSchema } from "./schema.mjs";
 import { env as clientEnv, formatErrors } from "./client.mjs";
 
-const _serverEnv = serverSchema.safeParse(process.env);
+/**
+ * You can't destruct `process.env` as a regular object, so we do
+ * a workaround. This is because Next.js evaluates this at build time,
+ * and only used environment variables are included in the build.
+ * @type {{ [key: string]: string | undefined; }}
+ */
+let serverEnv = {};
+Object.keys(serverSchema.shape).forEach(
+  (key) => (serverEnv[key] = process.env[key]),
+);
+
+const _serverEnv = serverSchema.safeParse(serverEnv);
 
 if (!_serverEnv.success) {
   console.error(
diff --git a/src/pages/api/examples.ts b/src/pages/api/examples.ts
deleted file mode 100644
index c0889f5..0000000
--- a/src/pages/api/examples.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import { type NextApiRequest, type NextApiResponse } from "next";
-
-import { prisma } from "../../server/db/client";
-
-const examples = async (req: NextApiRequest, res: NextApiResponse) => {
-  const examples = await prisma.example.findMany();
-  res.status(200).json(examples);
-};
-
-export default examples;
diff --git a/src/server/db/client.ts b/src/server/db.ts
similarity index 89%
rename from src/server/db/client.ts
rename to src/server/db.ts
index 0c3d234..5df917c 100644
--- a/src/server/db/client.ts
+++ b/src/server/db.ts
@@ -1,6 +1,6 @@
 import { PrismaClient } from "@prisma/client";
 
-import { env } from "../../env/server.mjs";
+import { env } from "../env/server.mjs";
 
 declare global {
   // eslint-disable-next-line no-var
