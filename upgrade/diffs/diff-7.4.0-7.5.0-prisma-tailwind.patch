diff --git a/next.config.mjs b/next.config.mjs
index 0ee755b..d7dfb79 100644
--- a/next.config.mjs
+++ b/next.config.mjs
@@ -1,15 +1,21 @@
 // @ts-check
+
 /**
  * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation.
  * This is especially useful for Docker builds.
  */
-!process.env.SKIP_ENV_VALIDATION && (await import("./src/env/server.mjs"));
+!process.env.SKIP_ENV_VALIDATION && (await import("./src/env.mjs"));
 
 /** @type {import("next").NextConfig} */
 const config = {
   reactStrictMode: true,
-  /* If trying out the experimental appDir, comment the i18n config out
-   * @see https://github.com/vercel/next.js/issues/41980 */
+
+  /**
+   * If you have the "experimental: { appDir: true }" setting enabled, then you
+   * must comment the below `i18n` config out.
+   *
+   * @see https://github.com/vercel/next.js/issues/41980
+   */
   i18n: {
     locales: ["en"],
     defaultLocale: "en",
diff --git a/package.json b/package.json
index 75fdc48..165e26f 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
@@ -34,6 +34,6 @@
     "typescript": "^4.9.4"
   },
   "ct3aMetadata": {
-    "initVersion": "7.4.0"
+    "initVersion": "7.5.0"
   }
 }
diff --git a/src/env.mjs b/src/env.mjs
new file mode 100644
index 0000000..1ef2d08
--- /dev/null
+++ b/src/env.mjs
@@ -0,0 +1,75 @@
+/* eslint-disable @typescript-eslint/ban-ts-comment */
+import { z } from "zod";
+
+/**
+ * Specify your server-side environment variables schema here.
+ * This way you can ensure the app isn't built with invalid env vars.
+ */
+const server = z.object({
+  DATABASE_URL: z.string().url(),
+  NODE_ENV: z.enum(["development", "test", "production"]),
+});
+
+/**
+ * Specify your client-side environment variables schema here.
+ * This way you can ensure the app isn't built with invalid env vars.
+ * To expose them to the client, prefix them with `NEXT_PUBLIC_`.
+ */
+const client = z.object({
+  // NEXT_PUBLIC_CLIENTVAR: z.string().min(1),
+});
+
+/**
+ * You can't destruct `process.env` as a regular object in the Next.js
+ * edge runtimes (e.g. middlewares) or client-side so we need to destruct manually.
+ * @type {Record<keyof z.infer<typeof server> | keyof z.infer<typeof client>, string | undefined>}
+ */
+const processEnv = {
+  DATABASE_URL: process.env.DATABASE_URL,
+  NODE_ENV: process.env.NODE_ENV,
+  // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,
+};
+
+// Don't touch the part below
+// --------------------------
+
+const merged = server.merge(client);
+/** @type z.infer<merged>
+ *  @ts-ignore - can't type this properly in jsdoc */
+let env = process.env;
+
+if (!!process.env.SKIP_ENV_VALIDATION == false) {
+  const isServer = typeof window === "undefined";
+
+  const parsed = isServer
+    ? merged.safeParse(processEnv) // on server we can validate all env vars
+    : client.safeParse(processEnv); // on client we can only validate the ones that are exposed
+
+  if (parsed.success === false) {
+    console.error(
+      "❌ Invalid environment variables:",
+      parsed.error.flatten().fieldErrors,
+    );
+    throw new Error("Invalid environment variables");
+  }
+
+  /** @type z.infer<merged>
+   *  @ts-ignore - can't type this properly in jsdoc */
+  env = new Proxy(parsed.data, {
+    get(target, prop) {
+      if (typeof prop !== "string") return undefined;
+      // Throw a descriptive error if a server-side env var is accessed on the client
+      // Otherwise it would just be returning `undefined` and be annoying to debug
+      if (!isServer && !prop.startsWith("NEXT_PUBLIC_"))
+        throw new Error(
+          process.env.NODE_ENV === "production"
+            ? "❌ Attempted to access a server-side environment variable on the client"
+            : `❌ Attempted to access server-side environment variable '${prop}' on the client`,
+        );
+      /*  @ts-ignore - can't type this properly in jsdoc */
+      return target[prop];
+    },
+  });
+}
+
+export { env };
diff --git a/src/env/client.mjs b/src/env/client.mjs
index 30958cb..afe30a5 100644
--- a/src/env/client.mjs
+++ b/src/env/client.mjs
@@ -1,4 +1,3 @@
-// @ts-check
 import { clientEnv, clientSchema } from "./schema.mjs";
 
 const _clientEnv = clientSchema.safeParse(clientEnv);
diff --git a/src/env/schema.mjs b/src/env/schema.mjs
index d883ade..d730707 100644
--- a/src/env/schema.mjs
+++ b/src/env/schema.mjs
@@ -1,4 +1,3 @@
-// @ts-check
 import { z } from "zod";
 
 /**
@@ -6,7 +5,6 @@ import { z } from "zod";
  * This way you can ensure the app isn't built with invalid env vars.
  */
 export const serverSchema = z.object({
-  DATABASE_URL: z.string().url(),
   NODE_ENV: z.enum(["development", "test", "production"]),
 });
 
@@ -16,7 +14,6 @@ export const serverSchema = z.object({
  * @type {{ [k in keyof z.input<typeof serverSchema>]: string | undefined }}
  */
 export const serverEnv = {
-  DATABASE_URL: process.env.DATABASE_URL,
   NODE_ENV: process.env.NODE_ENV,
 };
 
diff --git a/src/env/server.mjs b/src/env/server.mjs
index c04b5ae..050781a 100644
--- a/src/env/server.mjs
+++ b/src/env/server.mjs
@@ -1,4 +1,3 @@
-// @ts-check
 /**
  * This file is included in `/next.config.mjs` which ensures the app isn't built with invalid env vars.
  * It has to be a `.mjs`-file to be imported there.
diff --git a/src/server/db.ts b/src/server/db.ts
index 038504d..b724101 100644
--- a/src/server/db.ts
+++ b/src/server/db.ts
@@ -1,6 +1,6 @@
 import { PrismaClient } from "@prisma/client";
 
-import { env } from "../env/server.mjs";
+import { env } from "../env.mjs";
 
 const globalForPrisma = globalThis as unknown as { prisma: PrismaClient };
 
@@ -11,4 +11,4 @@ export const prisma =
       env.NODE_ENV === "development" ? ["query", "error", "warn"] : ["error"],
   });
 
-if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;
+if (env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;
diff --git a/tsconfig.json b/tsconfig.json
index 658068a..9630df8 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -3,6 +3,7 @@
     "target": "es2017",
     "lib": ["dom", "dom.iterable", "esnext"],
     "allowJs": true,
+    "checkJs": true,
     "skipLibCheck": true,
     "strict": true,
     "forceConsistentCasingInFileNames": true,
