diff --git a/next.config.mjs b/next.config.mjs
index 0ee755b..ce181ca 100644
--- a/next.config.mjs
+++ b/next.config.mjs
@@ -1,4 +1,5 @@
 // @ts-check
+
 /**
  * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation.
  * This is especially useful for Docker builds.
@@ -8,8 +9,13 @@
 /** @type {import("next").NextConfig} */
 const config = {
   reactStrictMode: true,
-  /* If trying out the experimental appDir, comment the i18n config out
-   * @see https://github.com/vercel/next.js/issues/41980 */
+
+  /**
+   * If you have the "experimental: { appDir: true }" setting enabled, then you
+   * must comment the below `i18n` config out.
+   *
+   * @see https://github.com/vercel/next.js/issues/41980
+   */
   i18n: {
     locales: ["en"],
     defaultLocale: "en",
diff --git a/package.json b/package.json
index 675a166..f862934 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
@@ -36,6 +36,6 @@
     "typescript": "^4.9.4"
   },
   "ct3aMetadata": {
-    "initVersion": "7.4.0"
+    "initVersion": "7.4.1"
   }
 }
diff --git a/src/server/api/trpc.ts b/src/server/api/trpc.ts
index 298667c..4e0af7f 100644
--- a/src/server/api/trpc.ts
+++ b/src/server/api/trpc.ts
@@ -1,20 +1,19 @@
 /**
  * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:
- * 1. You want to modify request context (see Part 1)
- * 2. You want to create a new middleware or type of procedure (see Part 3)
+ * 1. You want to modify request context (see Part 1).
+ * 2. You want to create a new middleware or type of procedure (see Part 3).
  *
- * tl;dr - this is where all the tRPC server stuff is created and plugged in.
- * The pieces you will need to use are documented accordingly near the end
+ * tl;dr - This is where all the tRPC server stuff is created and plugged in.
+ * The pieces you will need to use are documented accordingly near the end.
  */
 
 /**
  * 1. CONTEXT
  *
- * This section defines the "contexts" that are available in the backend API
- *
- * These allow you to access things like the database, the session, etc, when
- * processing a request
+ * This section defines the "contexts" that are available in the backend API.
  *
+ * These allow you to access things when processing a request, like the
+ * database, the session, etc.
  */
 import { type CreateNextContextOptions } from "@trpc/server/adapters/next";
 import { type Session } from "next-auth";
@@ -28,11 +27,12 @@ type CreateContextOptions = {
 
 /**
  * This helper generates the "internals" for a tRPC context. If you need to use
- * it, you can export it from here
+ * it, you can export it from here.
  *
  * Examples of things you may need it for:
- * - testing, so we dont have to mock Next.js' req/res
- * - trpc's `createSSGHelpers` where we don't have req/res
+ * - testing, so we don't have to mock Next.js' req/res
+ * - tRPC's `createSSGHelpers`, where we don't have req/res
+ *
  * @see https://create.t3.gg/en/usage/trpc#-servertrpccontextts
  */
 const createInnerTRPCContext = (opts: CreateContextOptions) => {
@@ -43,14 +43,15 @@ const createInnerTRPCContext = (opts: CreateContextOptions) => {
 };
 
 /**
- * This is the actual context you'll use in your router. It will be used to
- * process every request that goes through your tRPC endpoint
- * @link https://trpc.io/docs/context
+ * This is the actual context you will use in your router. It will be used to
+ * process every request that goes through your tRPC endpoint.
+ *
+ * @see https://trpc.io/docs/context
  */
 export const createTRPCContext = async (opts: CreateNextContextOptions) => {
   const { req, res } = opts;
 
-  // Get the session from the server using the unstable_getServerSession wrapper function
+  // Get the session from the server using the getServerSession wrapper function
   const session = await getServerAuthSession({ req, res });
 
   return createInnerTRPCContext({
@@ -61,8 +62,8 @@ export const createTRPCContext = async (opts: CreateNextContextOptions) => {
 /**
  * 2. INITIALIZATION
  *
- * This is where the trpc api is initialized, connecting the context and
- * transformer
+ * This is where the tRPC API is initialized, connecting the context and
+ * transformer.
  */
 import { initTRPC, TRPCError } from "@trpc/server";
 import superjson from "superjson";
@@ -78,27 +79,28 @@ const t = initTRPC.context<typeof createTRPCContext>().create({
  * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)
  *
  * These are the pieces you use to build your tRPC API. You should import these
- * a lot in the /src/server/api/routers folder
+ * a lot in the "/src/server/api/routers" directory.
  */
 
 /**
- * This is how you create new routers and subrouters in your tRPC API
+ * This is how you create new routers and sub-routers in your tRPC API.
+ *
  * @see https://trpc.io/docs/router
  */
 export const createTRPCRouter = t.router;
 
 /**
- * Public (unauthed) procedure
+ * Public (unauthenticated) procedure
  *
  * This is the base piece you use to build new queries and mutations on your
  * tRPC API. It does not guarantee that a user querying is authorized, but you
- * can still access user session data if they are logged in
+ * can still access user session data if they are logged in.
  */
 export const publicProcedure = t.procedure;
 
 /**
  * Reusable middleware that enforces users are logged in before running the
- * procedure
+ * procedure.
  */
 const enforceUserIsAuthed = t.middleware(({ ctx, next }) => {
   if (!ctx.session || !ctx.session.user) {
@@ -113,11 +115,11 @@ const enforceUserIsAuthed = t.middleware(({ ctx, next }) => {
 });
 
 /**
- * Protected (authed) procedure
+ * Protected (authenticated) procedure
  *
  * If you want a query or mutation to ONLY be accessible to logged in users, use
- * this. It verifies the session is valid and guarantees ctx.session.user is not
- * null
+ * this. It verifies the session is valid and guarantees `ctx.session.user` is
+ * not null.
  *
  * @see https://trpc.io/docs/procedures
  */
diff --git a/src/server/auth.ts b/src/server/auth.ts
index f127672..e1faee6 100644
--- a/src/server/auth.ts
+++ b/src/server/auth.ts
@@ -10,9 +10,10 @@ import { env } from "../env/server.mjs";
 import { prisma } from "./db";
 
 /**
- * Module augmentation for `next-auth` types
- * Allows us to add custom properties to the `session` object
- * and keep type safety
+ * Module augmentation for `next-auth` types.
+ * Allows us to add custom properties to the `session` object and keep type
+ * safety.
+ *
  * @see https://next-auth.js.org/getting-started/typescript#module-augmentation
  **/
 declare module "next-auth" {
@@ -31,8 +32,9 @@ declare module "next-auth" {
 }
 
 /**
- * Options for NextAuth.js used to configure
- * adapters, providers, callbacks, etc.
+ * Options for NextAuth.js used to configure adapters, providers, callbacks,
+ * etc.
+ *
  * @see https://next-auth.js.org/configuration/options
  **/
 export const authOptions: NextAuthOptions = {
@@ -64,8 +66,9 @@ export const authOptions: NextAuthOptions = {
 };
 
 /**
- * Wrapper for getServerSession so that you don't need
- * to import the authOptions in every file.
+ * Wrapper for `getServerSession` so that you don't need to import the
+ * `authOptions` in every file.
+ *
  * @see https://next-auth.js.org/configuration/nextjs
  **/
 export const getServerAuthSession = (ctx: {
diff --git a/src/utils/api.ts b/src/utils/api.ts
index c99a366..9e0c7b2 100644
--- a/src/utils/api.ts
+++ b/src/utils/api.ts
@@ -1,7 +1,7 @@
 /**
  * This is the client-side entrypoint for your tRPC API.
- * It's used to create the `api` object which contains the Next.js App-wrapper
- * as well as your typesafe react-query hooks.
+ * It is used to create the `api` object which contains the Next.js
+ * App-wrapper, as well as your type-safe React Query hooks.
  *
  * We also create a few inference helpers for input and output types
  */
@@ -18,20 +18,20 @@ const getBaseUrl = () => {
   return `http://localhost:${process.env.PORT ?? 3000}`; // dev SSR should use localhost
 };
 
-/**
- * A set of typesafe react-query hooks for your tRPC API
- */
+/** A set of type-safe react-query hooks for your tRPC API. */
 export const api = createTRPCNext<AppRouter>({
   config() {
     return {
       /**
-       * Transformer used for data de-serialization from the server
+       * Transformer used for data de-serialization from the server.
+       *
        * @see https://trpc.io/docs/data-transformers
        **/
       transformer: superjson,
 
       /**
-       * Links used to determine request flow from client to server
+       * Links used to determine request flow from client to server.
+       *
        * @see https://trpc.io/docs/links
        * */
       links: [
@@ -47,19 +47,23 @@ export const api = createTRPCNext<AppRouter>({
     };
   },
   /**
-   * Whether tRPC should await queries when server rendering pages
+   * Whether tRPC should await queries when server rendering pages.
+   *
    * @see https://trpc.io/docs/nextjs#ssr-boolean-default-false
    */
   ssr: false,
 });
 
 /**
- * Inference helper for inputs
+ * Inference helper for inputs.
+ *
  * @example type HelloInput = RouterInputs['example']['hello']
  **/
 export type RouterInputs = inferRouterInputs<AppRouter>;
+
 /**
- * Inference helper for outputs
+ * Inference helper for outputs.
+ *
  * @example type HelloOutput = RouterOutputs['example']['hello']
  **/
 export type RouterOutputs = inferRouterOutputs<AppRouter>;
