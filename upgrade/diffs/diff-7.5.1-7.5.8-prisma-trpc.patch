diff --git a/.env.example b/.env.example
index 89f2130..168cf5b 100644
--- a/.env.example
+++ b/.env.example
@@ -6,7 +6,7 @@
 # secrets in it. If you are cloning this repo, create a copy of this file named
 # ".env" and populate it with your secrets.
 
-# When adding additional environment variables, the schema in "/env/schema.mjs"
+# When adding additional environment variables, the schema in "/src/env.mjs"
 # should be updated accordingly.
 
 # Prisma
diff --git a/.eslintrc.cjs b/.eslintrc.cjs
new file mode 100644
index 0000000..861f139
--- /dev/null
+++ b/.eslintrc.cjs
@@ -0,0 +1,31 @@
+/** @type {import("eslint").Linter.Config} */
+const config = {
+  overrides: [
+    {
+      extends: [
+        "plugin:@typescript-eslint/recommended-requiring-type-checking",
+      ],
+      files: ["*.ts", "*.tsx"],
+      parserOptions: {
+        project: "tsconfig.json",
+      },
+    },
+  ],
+  parser: "@typescript-eslint/parser",
+  parserOptions: {
+    project: "./tsconfig.json",
+  },
+  plugins: ["@typescript-eslint"],
+  extends: ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"],
+  rules: {
+    "@typescript-eslint/consistent-type-imports": [
+      "warn",
+      {
+        prefer: "type-imports",
+        fixStyle: "inline-type-imports",
+      },
+    ],
+  },
+};
+
+module.exports = config;
diff --git a/.eslintrc.json b/.eslintrc.json
deleted file mode 100644
index 82671df..0000000
--- a/.eslintrc.json
+++ /dev/null
@@ -1,22 +0,0 @@
-{
-  "overrides": [
-    {
-      "extends": [
-        "plugin:@typescript-eslint/recommended-requiring-type-checking"
-      ],
-      "files": ["*.ts", "*.tsx"],
-      "parserOptions": {
-        "project": "tsconfig.json"
-      }
-    }
-  ],
-  "parser": "@typescript-eslint/parser",
-  "parserOptions": {
-    "project": "./tsconfig.json"
-  },
-  "plugins": ["@typescript-eslint"],
-  "extends": ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"],
-  "rules": {
-    "@typescript-eslint/consistent-type-imports": "warn"
-  }
-}
diff --git a/package.json b/package.json
index 3db00d2..65a177f 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
@@ -11,29 +11,30 @@
   },
   "dependencies": {
     "@prisma/client": "^4.9.0",
-    "@tanstack/react-query": "^4.20.0",
+    "@tanstack/react-query": "^4.20.2",
     "@trpc/client": "^10.9.0",
     "@trpc/next": "^10.9.0",
     "@trpc/react-query": "^10.9.0",
     "@trpc/server": "^10.9.0",
-    "next": "13.1.6",
+    "next": "^13.2.1",
     "react": "18.2.0",
     "react-dom": "18.2.0",
     "superjson": "1.9.1",
-    "zod": "^3.20.2"
+    "zod": "^3.20.6"
   },
   "devDependencies": {
-    "@types/node": "^18.11.18",
-    "@types/react": "^18.0.26",
-    "@types/react-dom": "^18.0.10",
-    "@typescript-eslint/eslint-plugin": "^5.47.1",
-    "@typescript-eslint/parser": "^5.47.1",
-    "eslint": "^8.30.0",
-    "eslint-config-next": "13.1.6",
+    "@types/eslint": "^8.21.1",
+    "@types/node": "^18.14.0",
+    "@types/react": "^18.0.28",
+    "@types/react-dom": "^18.0.11",
+    "@typescript-eslint/eslint-plugin": "^5.53.0",
+    "@typescript-eslint/parser": "^5.53.0",
+    "eslint": "^8.34.0",
+    "eslint-config-next": "^13.2.1",
     "prisma": "^4.9.0",
-    "typescript": "^4.9.4"
+    "typescript": "^4.9.5"
   },
   "ct3aMetadata": {
-    "initVersion": "7.5.1"
+    "initVersion": "7.5.8"
   }
 }
diff --git a/src/env.mjs b/src/env.mjs
index 1ef2d08..126943c 100644
--- a/src/env.mjs
+++ b/src/env.mjs
@@ -1,9 +1,8 @@
-/* eslint-disable @typescript-eslint/ban-ts-comment */
 import { z } from "zod";
 
 /**
- * Specify your server-side environment variables schema here.
- * This way you can ensure the app isn't built with invalid env vars.
+ * Specify your server-side environment variables schema here. This way you can ensure the app isn't
+ * built with invalid env vars.
  */
 const server = z.object({
   DATABASE_URL: z.string().url(),
@@ -11,17 +10,17 @@ const server = z.object({
 });
 
 /**
- * Specify your client-side environment variables schema here.
- * This way you can ensure the app isn't built with invalid env vars.
- * To expose them to the client, prefix them with `NEXT_PUBLIC_`.
+ * Specify your client-side environment variables schema here. This way you can ensure the app isn't
+ * built with invalid env vars. To expose them to the client, prefix them with `NEXT_PUBLIC_`.
  */
 const client = z.object({
   // NEXT_PUBLIC_CLIENTVAR: z.string().min(1),
 });
 
 /**
- * You can't destruct `process.env` as a regular object in the Next.js
- * edge runtimes (e.g. middlewares) or client-side so we need to destruct manually.
+ * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.
+ * middlewares) or client-side so we need to destruct manually.
+ *
  * @type {Record<keyof z.infer<typeof server> | keyof z.infer<typeof client>, string | undefined>}
  */
 const processEnv = {
@@ -34,16 +33,21 @@ const processEnv = {
 // --------------------------
 
 const merged = server.merge(client);
-/** @type z.infer<merged>
- *  @ts-ignore - can't type this properly in jsdoc */
-let env = process.env;
+
+/** @typedef {z.input<typeof merged>} MergedInput */
+/** @typedef {z.infer<typeof merged>} MergedOutput */
+/** @typedef {z.SafeParseReturnType<MergedInput, MergedOutput>} MergedSafeParseReturn */
+
+let env = /** @type {MergedOutput} */ (process.env);
 
 if (!!process.env.SKIP_ENV_VALIDATION == false) {
   const isServer = typeof window === "undefined";
 
-  const parsed = isServer
-    ? merged.safeParse(processEnv) // on server we can validate all env vars
-    : client.safeParse(processEnv); // on client we can only validate the ones that are exposed
+  const parsed = /** @type {MergedSafeParseReturn} */ (
+    isServer
+      ? merged.safeParse(processEnv) // on server we can validate all env vars
+      : client.safeParse(processEnv) // on client we can only validate the ones that are exposed
+  );
 
   if (parsed.success === false) {
     console.error(
@@ -53,8 +57,6 @@ if (!!process.env.SKIP_ENV_VALIDATION == false) {
     throw new Error("Invalid environment variables");
   }
 
-  /** @type z.infer<merged>
-   *  @ts-ignore - can't type this properly in jsdoc */
   env = new Proxy(parsed.data, {
     get(target, prop) {
       if (typeof prop !== "string") return undefined;
@@ -66,8 +68,7 @@ if (!!process.env.SKIP_ENV_VALIDATION == false) {
             ? "❌ Attempted to access a server-side environment variable on the client"
             : `❌ Attempted to access server-side environment variable '${prop}' on the client`,
         );
-      /*  @ts-ignore - can't type this properly in jsdoc */
-      return target[prop];
+      return target[/** @type {keyof typeof target} */ (prop)];
     },
   });
 }
diff --git a/src/pages/_app.tsx b/src/pages/_app.tsx
index 5f36a0d..1831917 100644
--- a/src/pages/_app.tsx
+++ b/src/pages/_app.tsx
@@ -1,8 +1,8 @@
 import { type AppType } from "next/app";
 
-import { api } from "../utils/api";
+import { api } from "~/utils/api";
 
-import "../styles/globals.css";
+import "~/styles/globals.css";
 
 const MyApp: AppType = ({ Component, pageProps }) => {
   return <Component {...pageProps} />;
diff --git a/src/pages/api/trpc/[trpc].ts b/src/pages/api/trpc/[trpc].ts
index 9102e8b..3c744a0 100644
--- a/src/pages/api/trpc/[trpc].ts
+++ b/src/pages/api/trpc/[trpc].ts
@@ -1,8 +1,8 @@
 import { createNextApiHandler } from "@trpc/server/adapters/next";
 
-import { env } from "../../../env.mjs";
-import { createTRPCContext } from "../../../server/api/trpc";
-import { appRouter } from "../../../server/api/root";
+import { env } from "~/env.mjs";
+import { createTRPCContext } from "~/server/api/trpc";
+import { appRouter } from "~/server/api/root";
 
 // export API handler
 export default createNextApiHandler({
diff --git a/src/pages/index.tsx b/src/pages/index.tsx
index 02a5df9..2e97a27 100644
--- a/src/pages/index.tsx
+++ b/src/pages/index.tsx
@@ -3,7 +3,7 @@ import { type NextPage } from "next";
 import Head from "next/head";
 import Link from "next/link";
 
-import { api } from "../utils/api";
+import { api } from "~/utils/api";
 
 const Home: NextPage = () => {
   const hello = api.example.hello.useQuery({ text: "from tRPC" });
diff --git a/src/server/api/root.ts b/src/server/api/root.ts
index c3f288e..93fba92 100644
--- a/src/server/api/root.ts
+++ b/src/server/api/root.ts
@@ -1,10 +1,10 @@
-import { createTRPCRouter } from "./trpc";
-import { exampleRouter } from "./routers/example";
+import { createTRPCRouter } from "~/server/api/trpc";
+import { exampleRouter } from "~/server/api/routers/example";
 
 /**
  * This is the primary router for your server.
  *
- * All routers added in /api/routers should be manually added here
+ * All routers added in /api/routers should be manually added here.
  */
 export const appRouter = createTRPCRouter({
   example: exampleRouter,
diff --git a/src/server/api/routers/example.ts b/src/server/api/routers/example.ts
index 7e9b9a3..be8d0e1 100644
--- a/src/server/api/routers/example.ts
+++ b/src/server/api/routers/example.ts
@@ -1,6 +1,6 @@
 import { z } from "zod";
 
-import { createTRPCRouter, publicProcedure } from "../trpc";
+import { createTRPCRouter, publicProcedure } from "~/server/api/trpc";
 
 export const exampleRouter = createTRPCRouter({
   hello: publicProcedure
diff --git a/src/server/api/trpc.ts b/src/server/api/trpc.ts
index 595c8fa..de532f6 100644
--- a/src/server/api/trpc.ts
+++ b/src/server/api/trpc.ts
@@ -3,8 +3,8 @@
  * 1. You want to modify request context (see Part 1).
  * 2. You want to create a new middleware or type of procedure (see Part 3).
  *
- * tl;dr - This is where all the tRPC server stuff is created and plugged in.
- * The pieces you will need to use are documented accordingly near the end.
+ * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will
+ * need to use are documented accordingly near the end.
  */
 
 /**
@@ -12,18 +12,17 @@
  *
  * This section defines the "contexts" that are available in the backend API.
  *
- * These allow you to access things when processing a request, like the
- * database, the session, etc.
+ * These allow you to access things when processing a request, like the database, the session, etc.
  */
 import { type CreateNextContextOptions } from "@trpc/server/adapters/next";
 
-import { prisma } from "../db";
+import { prisma } from "~/server/db";
 
 type CreateContextOptions = Record<string, never>;
 
 /**
- * This helper generates the "internals" for a tRPC context. If you need to use
- * it, you can export it from here.
+ * This helper generates the "internals" for a tRPC context. If you need to use it, you can export
+ * it from here.
  *
  * Examples of things you may need it for:
  * - testing, so we don't have to mock Next.js' req/res
@@ -38,8 +37,8 @@ const createInnerTRPCContext = (_opts: CreateContextOptions) => {
 };
 
 /**
- * This is the actual context you will use in your router. It will be used to
- * process every request that goes through your tRPC endpoint.
+ * This is the actual context you will use in your router. It will be used to process every request
+ * that goes through your tRPC endpoint.
  *
  * @see https://trpc.io/docs/context
  */
@@ -50,8 +49,7 @@ export const createTRPCContext = (_opts: CreateNextContextOptions) => {
 /**
  * 2. INITIALIZATION
  *
- * This is where the tRPC API is initialized, connecting the context and
- * transformer.
+ * This is where the tRPC API is initialized, connecting the context and transformer.
  */
 import { initTRPC } from "@trpc/server";
 import superjson from "superjson";
@@ -66,8 +64,8 @@ const t = initTRPC.context<typeof createTRPCContext>().create({
 /**
  * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)
  *
- * These are the pieces you use to build your tRPC API. You should import these
- * a lot in the "/src/server/api/routers" directory.
+ * These are the pieces you use to build your tRPC API. You should import these a lot in the
+ * "/src/server/api/routers" directory.
  */
 
 /**
@@ -80,8 +78,8 @@ export const createTRPCRouter = t.router;
 /**
  * Public (unauthenticated) procedure
  *
- * This is the base piece you use to build new queries and mutations on your
- * tRPC API. It does not guarantee that a user querying is authorized, but you
- * can still access user session data if they are logged in.
+ * This is the base piece you use to build new queries and mutations on your tRPC API. It does not
+ * guarantee that a user querying is authorized, but you can still access user session data if they
+ * are logged in.
  */
 export const publicProcedure = t.procedure;
diff --git a/src/server/db.ts b/src/server/db.ts
index b724101..f3d7be3 100644
--- a/src/server/db.ts
+++ b/src/server/db.ts
@@ -1,6 +1,6 @@
 import { PrismaClient } from "@prisma/client";
 
-import { env } from "../env.mjs";
+import { env } from "~/env.mjs";
 
 const globalForPrisma = globalThis as unknown as { prisma: PrismaClient };
 
diff --git a/src/utils/api.ts b/src/utils/api.ts
index 9e0c7b2..f4f4ad5 100644
--- a/src/utils/api.ts
+++ b/src/utils/api.ts
@@ -1,16 +1,15 @@
 /**
- * This is the client-side entrypoint for your tRPC API.
- * It is used to create the `api` object which contains the Next.js
- * App-wrapper, as well as your type-safe React Query hooks.
+ * This is the client-side entrypoint for your tRPC API. It is used to create the `api` object which
+ * contains the Next.js App-wrapper, as well as your type-safe React Query hooks.
  *
- * We also create a few inference helpers for input and output types
+ * We also create a few inference helpers for input and output types.
  */
 import { httpBatchLink, loggerLink } from "@trpc/client";
 import { createTRPCNext } from "@trpc/next";
 import { type inferRouterInputs, type inferRouterOutputs } from "@trpc/server";
 import superjson from "superjson";
 
-import { type AppRouter } from "../server/api/root";
+import { type AppRouter } from "~/server/api/root";
 
 const getBaseUrl = () => {
   if (typeof window !== "undefined") return ""; // browser should use relative url
@@ -26,14 +25,14 @@ export const api = createTRPCNext<AppRouter>({
        * Transformer used for data de-serialization from the server.
        *
        * @see https://trpc.io/docs/data-transformers
-       **/
+       */
       transformer: superjson,
 
       /**
        * Links used to determine request flow from client to server.
        *
        * @see https://trpc.io/docs/links
-       * */
+       */
       links: [
         loggerLink({
           enabled: (opts) =>
@@ -58,12 +57,12 @@ export const api = createTRPCNext<AppRouter>({
  * Inference helper for inputs.
  *
  * @example type HelloInput = RouterInputs['example']['hello']
- **/
+ */
 export type RouterInputs = inferRouterInputs<AppRouter>;
 
 /**
  * Inference helper for outputs.
  *
  * @example type HelloOutput = RouterOutputs['example']['hello']
- **/
+ */
 export type RouterOutputs = inferRouterOutputs<AppRouter>;
diff --git a/tsconfig.json b/tsconfig.json
index 9630df8..03ebb74 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -15,8 +15,19 @@
     "isolatedModules": true,
     "jsx": "preserve",
     "incremental": true,
-    "noUncheckedIndexedAccess": true
+    "noUncheckedIndexedAccess": true,
+    "baseUrl": ".",
+    "paths": {
+      "~/*": ["./src/*"]
+    }
   },
-  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "**/*.cjs", "**/*.mjs"],
+  "include": [
+    ".eslintrc.cjs",
+    "next-env.d.ts",
+    "**/*.ts",
+    "**/*.tsx",
+    "**/*.cjs",
+    "**/*.mjs"
+  ],
   "exclude": ["node_modules"]
 }
