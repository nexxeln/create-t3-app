diff --git a/.env.example b/.env.example
index 5a3a375..dbeac89 100644
--- a/.env.example
+++ b/.env.example
@@ -5,7 +5,6 @@
 # If you are cloning this repo, create a copy of this file named `.env` and populate it with your secrets.
 
 # When adding additional env variables, the schema in /env/schema.mjs should be updated accordingly
-
 # Next Auth
 # You can generate the secret via 'openssl rand -base64 32' on Linux
 # More info: https://next-auth.js.org/configuration/options#secret
diff --git a/.eslintrc.json b/.eslintrc.json
index 4cc0a95..82671df 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -1,4 +1,15 @@
 {
+  "overrides": [
+    {
+      "extends": [
+        "plugin:@typescript-eslint/recommended-requiring-type-checking"
+      ],
+      "files": ["*.ts", "*.tsx"],
+      "parserOptions": {
+        "project": "tsconfig.json"
+      }
+    }
+  ],
   "parser": "@typescript-eslint/parser",
   "parserOptions": {
     "project": "./tsconfig.json"
diff --git a/README.md b/README.md
index cc40526..fba19ed 100644
--- a/README.md
+++ b/README.md
@@ -25,4 +25,4 @@ You can check out the [create-t3-app GitHub repository](https://github.com/t3-os
 
 ## How do I deploy this?
 
-Follow our deployment guides for [Vercel](https://create.t3.gg/en/deployment/vercel) and [Docker](https://create.t3.gg/en/deployment/docker) for more information.
+Follow our deployment guides for [Vercel](https://create.t3.gg/en/deployment/vercel), [Netlify](https://create.t3.gg/en/deployment/netlify) and [Docker](https://create.t3.gg/en/deployment/docker) for more information.
diff --git a/package.json b/package.json
index b91e8a9..df63982 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
@@ -9,35 +9,35 @@
     "start": "next start"
   },
   "dependencies": {
-    "@tanstack/react-query": "^4.16.0",
-    "@trpc/client": "^10.0.0",
-    "@trpc/next": "^10.0.0",
-    "@trpc/react-query": "^10.0.0",
-    "@trpc/server": "^10.0.0",
+    "@tanstack/react-query": "^4.20.0",
+    "@trpc/client": "^10.8.1",
+    "@trpc/next": "^10.8.1",
+    "@trpc/react-query": "^10.8.1",
+    "@trpc/server": "^10.8.1",
     "next": "13.1.1",
-    "next-auth": "^4.18.3",
+    "next-auth": "^4.18.7",
     "react": "18.2.0",
     "react-dom": "18.2.0",
     "superjson": "1.9.1",
-    "zod": "^3.18.0"
+    "zod": "^3.20.2"
   },
   "devDependencies": {
-    "@types/node": "^18.0.0",
+    "@types/node": "^18.11.18",
     "@types/prettier": "^2.7.2",
-    "@types/react": "^18.0.14",
-    "@types/react-dom": "^18.0.5",
-    "@typescript-eslint/eslint-plugin": "^5.33.0",
-    "@typescript-eslint/parser": "^5.33.0",
+    "@types/react": "^18.0.26",
+    "@types/react-dom": "^18.0.10",
+    "@typescript-eslint/eslint-plugin": "^5.47.1",
+    "@typescript-eslint/parser": "^5.47.1",
     "autoprefixer": "^10.4.7",
-    "eslint": "^8.26.0",
+    "eslint": "^8.30.0",
     "eslint-config-next": "13.1.1",
     "postcss": "^8.4.14",
     "prettier": "^2.8.1",
     "prettier-plugin-tailwindcss": "^0.2.1",
     "tailwindcss": "^3.2.0",
-    "typescript": "^4.8.4"
+    "typescript": "^4.9.4"
   },
   "ct3aMetadata": {
-    "initVersion": "6.12.0"
+    "initVersion": "7.2.0"
   }
 }
diff --git a/src/env/schema.mjs b/src/env/schema.mjs
index cd0e268..1068e79 100644
--- a/src/env/schema.mjs
+++ b/src/env/schema.mjs
@@ -22,6 +22,19 @@ export const serverSchema = z.object({
   DISCORD_CLIENT_SECRET: z.string(),
 });
 
+/**
+ * You can't destruct `process.env` as a regular object in the Next.js
+ * middleware, so you have to do it manually here.
+ * @type {{ [k in keyof z.infer<typeof serverSchema>]: z.infer<typeof serverSchema>[k] | undefined }}
+ */
+export const serverEnv = {
+  NODE_ENV: process.env.NODE_ENV,
+  NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,
+  NEXTAUTH_URL: process.env.NEXTAUTH_URL,
+  DISCORD_CLIENT_ID: process.env.DISCORD_CLIENT_ID,
+  DISCORD_CLIENT_SECRET: process.env.DISCORD_CLIENT_SECRET,
+};
+
 /**
  * Specify your client-side environment variables schema here.
  * This way you can ensure the app isn't built with invalid env vars.
diff --git a/src/env/server.mjs b/src/env/server.mjs
index 736e3a6..c04b5ae 100644
--- a/src/env/server.mjs
+++ b/src/env/server.mjs
@@ -3,10 +3,10 @@
  * This file is included in `/next.config.mjs` which ensures the app isn't built with invalid env vars.
  * It has to be a `.mjs`-file to be imported there.
  */
-import { serverSchema } from "./schema.mjs";
+import { serverSchema, serverEnv } from "./schema.mjs";
 import { env as clientEnv, formatErrors } from "./client.mjs";
 
-const _serverEnv = serverSchema.safeParse(process.env);
+const _serverEnv = serverSchema.safeParse(serverEnv);
 
 if (!_serverEnv.success) {
   console.error(
diff --git a/src/pages/_app.tsx b/src/pages/_app.tsx
index 2e2d750..2a46c68 100644
--- a/src/pages/_app.tsx
+++ b/src/pages/_app.tsx
@@ -2,7 +2,7 @@ import { type AppType } from "next/app";
 import { type Session } from "next-auth";
 import { SessionProvider } from "next-auth/react";
 
-import { trpc } from "../utils/trpc";
+import { api } from "../utils/api";
 
 import "../styles/globals.css";
 
@@ -17,4 +17,4 @@ const MyApp: AppType<{ session: Session | null }> = ({
   );
 };
 
-export default trpc.withTRPC(MyApp);
+export default api.withTRPC(MyApp);
diff --git a/src/pages/api/auth/[...nextauth].ts b/src/pages/api/auth/[...nextauth].ts
index 396fc10..d317154 100644
--- a/src/pages/api/auth/[...nextauth].ts
+++ b/src/pages/api/auth/[...nextauth].ts
@@ -19,7 +19,15 @@ export const authOptions: NextAuthOptions = {
       clientId: env.DISCORD_CLIENT_ID,
       clientSecret: env.DISCORD_CLIENT_SECRET,
     }),
-    // ...add more providers here
+    /**
+     * ...add more providers here
+     *
+     * Most other providers require a bit more work than the Discord provider.
+     * For example, the GitHub provider requires you to add the
+     * `refresh_token_expires_in` field to the Account model. Refer to the
+     * NextAuth.js docs for the provider you want to use. Example:
+     * @see https://next-auth.js.org/providers/github
+     */
   ],
 };
 
diff --git a/src/pages/api/restricted.ts b/src/pages/api/restricted.ts
deleted file mode 100644
index 39d936d..0000000
--- a/src/pages/api/restricted.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-import { type NextApiRequest, type NextApiResponse } from "next";
-
-import { getServerAuthSession } from "../../server/common/get-server-auth-session";
-
-const restricted = async (req: NextApiRequest, res: NextApiResponse) => {
-  const session = await getServerAuthSession({ req, res });
-
-  if (session) {
-    res.send({
-      content:
-        "This is protected content. You can access this content because you are signed in.",
-    });
-  } else {
-    res.send({
-      error:
-        "You must be signed in to view the protected content on this page.",
-    });
-  }
-};
-
-export default restricted;
diff --git a/src/pages/api/trpc/[trpc].ts b/src/pages/api/trpc/[trpc].ts
index f69201d..8ec828b 100644
--- a/src/pages/api/trpc/[trpc].ts
+++ b/src/pages/api/trpc/[trpc].ts
@@ -1,17 +1,19 @@
 import { createNextApiHandler } from "@trpc/server/adapters/next";
 
 import { env } from "../../../env/server.mjs";
-import { createContext } from "../../../server/trpc/context";
-import { appRouter } from "../../../server/trpc/router/_app";
+import { createTRPCContext } from "../../../server/api/trpc";
+import { appRouter } from "../../../server/api/root";
 
 // export API handler
 export default createNextApiHandler({
   router: appRouter,
-  createContext,
+  createContext: createTRPCContext,
   onError:
     env.NODE_ENV === "development"
       ? ({ path, error }) => {
-          console.error(`❌ tRPC failed on ${path}: ${error}`);
+          console.error(
+            `❌ tRPC failed on ${path ?? "<no-path>"}: ${error.message}`,
+          );
         }
       : undefined,
 });
diff --git a/src/pages/index.tsx b/src/pages/index.tsx
index e727579..f61d854 100644
--- a/src/pages/index.tsx
+++ b/src/pages/index.tsx
@@ -3,10 +3,10 @@ import Head from "next/head";
 import Link from "next/link";
 import { signIn, signOut, useSession } from "next-auth/react";
 
-import { trpc } from "../utils/trpc";
+import { api } from "../utils/api";
 
 const Home: NextPage = () => {
-  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });
+  const hello = api.example.hello.useQuery({ text: "from tRPC" });
 
   return (
     <>
@@ -61,7 +61,7 @@ export default Home;
 const AuthShowcase: React.FC = () => {
   const { data: sessionData } = useSession();
 
-  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
+  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
     undefined, // no input
     { enabled: sessionData?.user !== undefined },
   );
@@ -74,7 +74,7 @@ const AuthShowcase: React.FC = () => {
       </p>
       <button
         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
-        onClick={sessionData ? () => signOut() : () => signIn()}
+        onClick={sessionData ? () => void signOut() : () => void signIn()}
       >
         {sessionData ? "Sign out" : "Sign in"}
       </button>
diff --git a/src/server/api/root.ts b/src/server/api/root.ts
new file mode 100644
index 0000000..c3f288e
--- /dev/null
+++ b/src/server/api/root.ts
@@ -0,0 +1,14 @@
+import { createTRPCRouter } from "./trpc";
+import { exampleRouter } from "./routers/example";
+
+/**
+ * This is the primary router for your server.
+ *
+ * All routers added in /api/routers should be manually added here
+ */
+export const appRouter = createTRPCRouter({
+  example: exampleRouter,
+});
+
+// export type definition of API
+export type AppRouter = typeof appRouter;
diff --git a/src/server/api/routers/example.ts b/src/server/api/routers/example.ts
new file mode 100644
index 0000000..30559f2
--- /dev/null
+++ b/src/server/api/routers/example.ts
@@ -0,0 +1,17 @@
+import { z } from "zod";
+
+import { createTRPCRouter, publicProcedure, protectedProcedure } from "../trpc";
+
+export const exampleRouter = createTRPCRouter({
+  hello: publicProcedure
+    .input(z.object({ text: z.string() }))
+    .query(({ input }) => {
+      return {
+        greeting: `Hello ${input.text}`,
+      };
+    }),
+
+  getSecretMessage: protectedProcedure.query(() => {
+    return "you can now see this secret message!";
+  }),
+});
diff --git a/src/server/api/trpc.ts b/src/server/api/trpc.ts
new file mode 100644
index 0000000..a8c5a48
--- /dev/null
+++ b/src/server/api/trpc.ts
@@ -0,0 +1,122 @@
+/**
+ * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:
+ * 1. You want to modify request context (see Part 1)
+ * 2. You want to create a new middleware or type of procedure (see Part 3)
+ *
+ * tl;dr - this is where all the tRPC server stuff is created and plugged in.
+ * The pieces you will need to use are documented accordingly near the end
+ */
+
+/**
+ * 1. CONTEXT
+ *
+ * This section defines the "contexts" that are available in the backend API
+ *
+ * These allow you to access things like the database, the session, etc, when
+ * processing a request
+ *
+ */
+import { type CreateNextContextOptions } from "@trpc/server/adapters/next";
+import { type Session } from "next-auth";
+
+import { getServerAuthSession } from "../auth";
+
+type CreateContextOptions = {
+  session: Session | null;
+};
+
+/**
+ * This helper generates the "internals" for a tRPC context. If you need to use
+ * it, you can export it from here
+ *
+ * Examples of things you may need it for:
+ * - testing, so we dont have to mock Next.js' req/res
+ * - trpc's `createSSGHelpers` where we don't have req/res
+ * @see https://create.t3.gg/en/usage/trpc#-servertrpccontextts
+ */
+const createInnerTRPCContext = (opts: CreateContextOptions) => {
+  return {
+    session: opts.session,
+  };
+};
+
+/**
+ * This is the actual context you'll use in your router. It will be used to
+ * process every request that goes through your tRPC endpoint
+ * @link https://trpc.io/docs/context
+ */
+export const createTRPCContext = async (opts: CreateNextContextOptions) => {
+  const { req, res } = opts;
+
+  // Get the session from the server using the unstable_getServerSession wrapper function
+  const session = await getServerAuthSession({ req, res });
+
+  return createInnerTRPCContext({
+    session,
+  });
+};
+
+/**
+ * 2. INITIALIZATION
+ *
+ * This is where the trpc api is initialized, connecting the context and
+ * transformer
+ */
+import { initTRPC, TRPCError } from "@trpc/server";
+import superjson from "superjson";
+
+const t = initTRPC.context<typeof createTRPCContext>().create({
+  transformer: superjson,
+  errorFormatter({ shape }) {
+    return shape;
+  },
+});
+
+/**
+ * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)
+ *
+ * These are the pieces you use to build your tRPC API. You should import these
+ * a lot in the /src/server/api/routers folder
+ */
+
+/**
+ * This is how you create new routers and subrouters in your tRPC API
+ * @see https://trpc.io/docs/router
+ */
+export const createTRPCRouter = t.router;
+
+/**
+ * Public (unauthed) procedure
+ *
+ * This is the base piece you use to build new queries and mutations on your
+ * tRPC API. It does not guarantee that a user querying is authorized, but you
+ * can still access user session data if they are logged in
+ */
+export const publicProcedure = t.procedure;
+
+/**
+ * Reusable middleware that enforces users are logged in before running the
+ * procedure
+ */
+const enforceUserIsAuthed = t.middleware(({ ctx, next }) => {
+  if (!ctx.session || !ctx.session.user) {
+    throw new TRPCError({ code: "UNAUTHORIZED" });
+  }
+  return next({
+    ctx: {
+      // infers the `session` as non-nullable
+      session: { ...ctx.session, user: ctx.session.user },
+    },
+  });
+});
+
+/**
+ * Protected (authed) procedure
+ *
+ * If you want a query or mutation to ONLY be accessible to logged in users, use
+ * this. It verifies the session is valid and guarantees ctx.session.user is not
+ * null
+ *
+ * @see https://trpc.io/docs/procedures
+ */
+export const protectedProcedure = t.procedure.use(enforceUserIsAuthed);
diff --git a/src/server/common/get-server-auth-session.ts b/src/server/auth.ts
similarity index 50%
rename from src/server/common/get-server-auth-session.ts
rename to src/server/auth.ts
index b2b90ed..a99fdae 100644
--- a/src/server/common/get-server-auth-session.ts
+++ b/src/server/auth.ts
@@ -1,12 +1,18 @@
 import { type GetServerSidePropsContext } from "next";
 import { unstable_getServerSession } from "next-auth";
 
-import { authOptions } from "../../pages/api/auth/[...nextauth]";
+import { authOptions } from "../pages/api/auth/[...nextauth]";
 
 /**
- * Wrapper for unstable_getServerSession https://next-auth.js.org/configuration/nextjs
- * See example usage in trpc createContext or the restricted API route
+ * Wrapper for unstable_getServerSession, used in trpc createContext and the
+ * restricted API route
+ *
+ * Don't worry too much about the "unstable", it's safe to use but the syntax
+ * may change in future versions
+ *
+ * @see https://next-auth.js.org/configuration/nextjs
  */
+
 export const getServerAuthSession = async (ctx: {
   req: GetServerSidePropsContext["req"];
   res: GetServerSidePropsContext["res"];
diff --git a/src/server/trpc/context.ts b/src/server/trpc/context.ts
deleted file mode 100644
index af3ff21..0000000
--- a/src/server/trpc/context.ts
+++ /dev/null
@@ -1,37 +0,0 @@
-import { type inferAsyncReturnType } from "@trpc/server";
-import { type CreateNextContextOptions } from "@trpc/server/adapters/next";
-import { type Session } from "next-auth";
-
-import { getServerAuthSession } from "../common/get-server-auth-session";
-
-type CreateContextOptions = {
-  session: Session | null;
-};
-
-/** Use this helper for:
- * - testing, so we dont have to mock Next.js' req/res
- * - trpc's `createSSGHelpers` where we don't have req/res
- * @see https://create.t3.gg/en/usage/trpc#-servertrpccontextts
- **/
-export const createContextInner = async (opts: CreateContextOptions) => {
-  return {
-    session: opts.session,
-  };
-};
-
-/**
- * This is the actual context you'll use in your router
- * @link https://trpc.io/docs/context
- **/
-export const createContext = async (opts: CreateNextContextOptions) => {
-  const { req, res } = opts;
-
-  // Get the session from the server using the unstable_getServerSession wrapper function
-  const session = await getServerAuthSession({ req, res });
-
-  return await createContextInner({
-    session,
-  });
-};
-
-export type Context = inferAsyncReturnType<typeof createContext>;
diff --git a/src/server/trpc/router/_app.ts b/src/server/trpc/router/_app.ts
deleted file mode 100644
index 0316694..0000000
--- a/src/server/trpc/router/_app.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-import { router } from "../trpc";
-import { authRouter } from "./auth";
-import { exampleRouter } from "./example";
-
-export const appRouter = router({
-  example: exampleRouter,
-  auth: authRouter,
-});
-
-// export type definition of API
-export type AppRouter = typeof appRouter;
diff --git a/src/server/trpc/router/auth.ts b/src/server/trpc/router/auth.ts
deleted file mode 100644
index 0fd2185..0000000
--- a/src/server/trpc/router/auth.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import { router, publicProcedure, protectedProcedure } from "../trpc";
-
-export const authRouter = router({
-  getSession: publicProcedure.query(({ ctx }) => {
-    return ctx.session;
-  }),
-  getSecretMessage: protectedProcedure.query(() => {
-    return "you can now see this secret message!";
-  }),
-});
diff --git a/src/server/trpc/router/example.ts b/src/server/trpc/router/example.ts
deleted file mode 100644
index 086a723..0000000
--- a/src/server/trpc/router/example.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import { z } from "zod";
-
-import { router, publicProcedure } from "../trpc";
-
-export const exampleRouter = router({
-  hello: publicProcedure
-    .input(z.object({ text: z.string().nullish() }).nullish())
-    .query(({ input }) => {
-      return {
-        greeting: `Hello ${input?.text ?? "world"}`,
-      };
-    }),
-});
diff --git a/src/server/trpc/trpc.ts b/src/server/trpc/trpc.ts
deleted file mode 100644
index 7c80f44..0000000
--- a/src/server/trpc/trpc.ts
+++ /dev/null
@@ -1,39 +0,0 @@
-import { initTRPC, TRPCError } from "@trpc/server";
-import superjson from "superjson";
-
-import { type Context } from "./context";
-
-const t = initTRPC.context<Context>().create({
-  transformer: superjson,
-  errorFormatter({ shape }) {
-    return shape;
-  },
-});
-
-export const router = t.router;
-
-/**
- * Unprotected procedure
- **/
-export const publicProcedure = t.procedure;
-
-/**
- * Reusable middleware to ensure
- * users are logged in
- */
-const isAuthed = t.middleware(({ ctx, next }) => {
-  if (!ctx.session || !ctx.session.user) {
-    throw new TRPCError({ code: "UNAUTHORIZED" });
-  }
-  return next({
-    ctx: {
-      // infers the `session` as non-nullable
-      session: { ...ctx.session, user: ctx.session.user },
-    },
-  });
-});
-
-/**
- * Protected procedure
- **/
-export const protectedProcedure = t.procedure.use(isAuthed);
diff --git a/src/utils/trpc.ts b/src/utils/api.ts
similarity index 59%
rename from src/utils/trpc.ts
rename to src/utils/api.ts
index 2391cbc..c99a366 100644
--- a/src/utils/trpc.ts
+++ b/src/utils/api.ts
@@ -1,9 +1,16 @@
+/**
+ * This is the client-side entrypoint for your tRPC API.
+ * It's used to create the `api` object which contains the Next.js App-wrapper
+ * as well as your typesafe react-query hooks.
+ *
+ * We also create a few inference helpers for input and output types
+ */
 import { httpBatchLink, loggerLink } from "@trpc/client";
 import { createTRPCNext } from "@trpc/next";
 import { type inferRouterInputs, type inferRouterOutputs } from "@trpc/server";
 import superjson from "superjson";
 
-import { type AppRouter } from "../server/trpc/router/_app";
+import { type AppRouter } from "../server/api/root";
 
 const getBaseUrl = () => {
   if (typeof window !== "undefined") return ""; // browser should use relative url
@@ -11,10 +18,22 @@ const getBaseUrl = () => {
   return `http://localhost:${process.env.PORT ?? 3000}`; // dev SSR should use localhost
 };
 
-export const trpc = createTRPCNext<AppRouter>({
+/**
+ * A set of typesafe react-query hooks for your tRPC API
+ */
+export const api = createTRPCNext<AppRouter>({
   config() {
     return {
+      /**
+       * Transformer used for data de-serialization from the server
+       * @see https://trpc.io/docs/data-transformers
+       **/
       transformer: superjson,
+
+      /**
+       * Links used to determine request flow from client to server
+       * @see https://trpc.io/docs/links
+       * */
       links: [
         loggerLink({
           enabled: (opts) =>
@@ -27,6 +46,10 @@ export const trpc = createTRPCNext<AppRouter>({
       ],
     };
   },
+  /**
+   * Whether tRPC should await queries when server rendering pages
+   * @see https://trpc.io/docs/nextjs#ssr-boolean-default-false
+   */
   ssr: false,
 });
 
