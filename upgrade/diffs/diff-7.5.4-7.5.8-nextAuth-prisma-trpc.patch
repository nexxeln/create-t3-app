diff --git a/.eslintrc.cjs b/.eslintrc.cjs
new file mode 100644
index 0000000..861f139
--- /dev/null
+++ b/.eslintrc.cjs
@@ -0,0 +1,31 @@
+/** @type {import("eslint").Linter.Config} */
+const config = {
+  overrides: [
+    {
+      extends: [
+        "plugin:@typescript-eslint/recommended-requiring-type-checking",
+      ],
+      files: ["*.ts", "*.tsx"],
+      parserOptions: {
+        project: "tsconfig.json",
+      },
+    },
+  ],
+  parser: "@typescript-eslint/parser",
+  parserOptions: {
+    project: "./tsconfig.json",
+  },
+  plugins: ["@typescript-eslint"],
+  extends: ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"],
+  rules: {
+    "@typescript-eslint/consistent-type-imports": [
+      "warn",
+      {
+        prefer: "type-imports",
+        fixStyle: "inline-type-imports",
+      },
+    ],
+  },
+};
+
+module.exports = config;
diff --git a/.eslintrc.json b/.eslintrc.json
deleted file mode 100644
index 82671df..0000000
--- a/.eslintrc.json
+++ /dev/null
@@ -1,22 +0,0 @@
-{
-  "overrides": [
-    {
-      "extends": [
-        "plugin:@typescript-eslint/recommended-requiring-type-checking"
-      ],
-      "files": ["*.ts", "*.tsx"],
-      "parserOptions": {
-        "project": "tsconfig.json"
-      }
-    }
-  ],
-  "parser": "@typescript-eslint/parser",
-  "parserOptions": {
-    "project": "./tsconfig.json"
-  },
-  "plugins": ["@typescript-eslint"],
-  "extends": ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"],
-  "rules": {
-    "@typescript-eslint/consistent-type-imports": "warn"
-  }
-}
diff --git a/package.json b/package.json
index 7db2d00..c783ec2 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
@@ -17,25 +17,26 @@
     "@trpc/next": "^10.9.0",
     "@trpc/react-query": "^10.9.0",
     "@trpc/server": "^10.9.0",
-    "next": "13.1.6",
+    "next": "^13.2.1",
     "next-auth": "^4.19.0",
     "react": "18.2.0",
     "react-dom": "18.2.0",
     "superjson": "1.9.1",
-    "zod": "^3.20.2"
+    "zod": "^3.20.6"
   },
   "devDependencies": {
-    "@types/node": "^18.11.18",
-    "@types/react": "^18.0.26",
-    "@types/react-dom": "^18.0.10",
-    "@typescript-eslint/eslint-plugin": "^5.47.1",
-    "@typescript-eslint/parser": "^5.47.1",
-    "eslint": "^8.30.0",
-    "eslint-config-next": "13.1.6",
+    "@types/eslint": "^8.21.1",
+    "@types/node": "^18.14.0",
+    "@types/react": "^18.0.28",
+    "@types/react-dom": "^18.0.11",
+    "@typescript-eslint/eslint-plugin": "^5.53.0",
+    "@typescript-eslint/parser": "^5.53.0",
+    "eslint": "^8.34.0",
+    "eslint-config-next": "^13.2.1",
     "prisma": "^4.9.0",
-    "typescript": "^4.9.4"
+    "typescript": "^4.9.5"
   },
   "ct3aMetadata": {
-    "initVersion": "7.5.4"
+    "initVersion": "7.5.8"
   }
 }
diff --git a/src/env.mjs b/src/env.mjs
index 444a04a..fcad3ec 100644
--- a/src/env.mjs
+++ b/src/env.mjs
@@ -1,8 +1,8 @@
 import { z } from "zod";
 
 /**
- * Specify your server-side environment variables schema here.
- * This way you can ensure the app isn't built with invalid env vars.
+ * Specify your server-side environment variables schema here. This way you can ensure the app isn't
+ * built with invalid env vars.
  */
 const server = z.object({
   DATABASE_URL: z.string().url(),
@@ -24,17 +24,17 @@ const server = z.object({
 });
 
 /**
- * Specify your client-side environment variables schema here.
- * This way you can ensure the app isn't built with invalid env vars.
- * To expose them to the client, prefix them with `NEXT_PUBLIC_`.
+ * Specify your client-side environment variables schema here. This way you can ensure the app isn't
+ * built with invalid env vars. To expose them to the client, prefix them with `NEXT_PUBLIC_`.
  */
 const client = z.object({
   // NEXT_PUBLIC_CLIENTVAR: z.string().min(1),
 });
 
 /**
- * You can't destruct `process.env` as a regular object in the Next.js
- * edge runtimes (e.g. middlewares) or client-side so we need to destruct manually.
+ * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.
+ * middlewares) or client-side so we need to destruct manually.
+ *
  * @type {Record<keyof z.infer<typeof server> | keyof z.infer<typeof client>, string | undefined>}
  */
 const processEnv = {
diff --git a/src/server/api/root.ts b/src/server/api/root.ts
index 3ed2ed5..93fba92 100644
--- a/src/server/api/root.ts
+++ b/src/server/api/root.ts
@@ -4,7 +4,7 @@ import { exampleRouter } from "~/server/api/routers/example";
 /**
  * This is the primary router for your server.
  *
- * All routers added in /api/routers should be manually added here
+ * All routers added in /api/routers should be manually added here.
  */
 export const appRouter = createTRPCRouter({
   example: exampleRouter,
diff --git a/src/server/api/trpc.ts b/src/server/api/trpc.ts
index dabb987..03e3d2e 100644
--- a/src/server/api/trpc.ts
+++ b/src/server/api/trpc.ts
@@ -3,8 +3,8 @@
  * 1. You want to modify request context (see Part 1).
  * 2. You want to create a new middleware or type of procedure (see Part 3).
  *
- * tl;dr - This is where all the tRPC server stuff is created and plugged in.
- * The pieces you will need to use are documented accordingly near the end.
+ * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will
+ * need to use are documented accordingly near the end.
  */
 
 /**
@@ -12,8 +12,7 @@
  *
  * This section defines the "contexts" that are available in the backend API.
  *
- * These allow you to access things when processing a request, like the
- * database, the session, etc.
+ * These allow you to access things when processing a request, like the database, the session, etc.
  */
 import { type CreateNextContextOptions } from "@trpc/server/adapters/next";
 import { type Session } from "next-auth";
@@ -26,8 +25,8 @@ type CreateContextOptions = {
 };
 
 /**
- * This helper generates the "internals" for a tRPC context. If you need to use
- * it, you can export it from here.
+ * This helper generates the "internals" for a tRPC context. If you need to use it, you can export
+ * it from here.
  *
  * Examples of things you may need it for:
  * - testing, so we don't have to mock Next.js' req/res
@@ -43,8 +42,8 @@ const createInnerTRPCContext = (opts: CreateContextOptions) => {
 };
 
 /**
- * This is the actual context you will use in your router. It will be used to
- * process every request that goes through your tRPC endpoint.
+ * This is the actual context you will use in your router. It will be used to process every request
+ * that goes through your tRPC endpoint.
  *
  * @see https://trpc.io/docs/context
  */
@@ -62,8 +61,7 @@ export const createTRPCContext = async (opts: CreateNextContextOptions) => {
 /**
  * 2. INITIALIZATION
  *
- * This is where the tRPC API is initialized, connecting the context and
- * transformer.
+ * This is where the tRPC API is initialized, connecting the context and transformer.
  */
 import { initTRPC, TRPCError } from "@trpc/server";
 import superjson from "superjson";
@@ -78,8 +76,8 @@ const t = initTRPC.context<typeof createTRPCContext>().create({
 /**
  * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)
  *
- * These are the pieces you use to build your tRPC API. You should import these
- * a lot in the "/src/server/api/routers" directory.
+ * These are the pieces you use to build your tRPC API. You should import these a lot in the
+ * "/src/server/api/routers" directory.
  */
 
 /**
@@ -92,16 +90,13 @@ export const createTRPCRouter = t.router;
 /**
  * Public (unauthenticated) procedure
  *
- * This is the base piece you use to build new queries and mutations on your
- * tRPC API. It does not guarantee that a user querying is authorized, but you
- * can still access user session data if they are logged in.
+ * This is the base piece you use to build new queries and mutations on your tRPC API. It does not
+ * guarantee that a user querying is authorized, but you can still access user session data if they
+ * are logged in.
  */
 export const publicProcedure = t.procedure;
 
-/**
- * Reusable middleware that enforces users are logged in before running the
- * procedure.
- */
+/** Reusable middleware that enforces users are logged in before running the procedure. */
 const enforceUserIsAuthed = t.middleware(({ ctx, next }) => {
   if (!ctx.session || !ctx.session.user) {
     throw new TRPCError({ code: "UNAUTHORIZED" });
@@ -117,9 +112,8 @@ const enforceUserIsAuthed = t.middleware(({ ctx, next }) => {
 /**
  * Protected (authenticated) procedure
  *
- * If you want a query or mutation to ONLY be accessible to logged in users, use
- * this. It verifies the session is valid and guarantees `ctx.session.user` is
- * not null.
+ * If you want a query or mutation to ONLY be accessible to logged in users, use this. It verifies
+ * the session is valid and guarantees `ctx.session.user` is not null.
  *
  * @see https://trpc.io/docs/procedures
  */
diff --git a/src/server/auth.ts b/src/server/auth.ts
index 8d35adb..7e6d826 100644
--- a/src/server/auth.ts
+++ b/src/server/auth.ts
@@ -1,4 +1,4 @@
-import type { GetServerSidePropsContext } from "next";
+import { type GetServerSidePropsContext } from "next";
 import {
   getServerSession,
   type NextAuthOptions,
@@ -10,12 +10,11 @@ import { env } from "~/env.mjs";
 import { prisma } from "~/server/db";
 
 /**
- * Module augmentation for `next-auth` types.
- * Allows us to add custom properties to the `session` object and keep type
- * safety.
+ * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`
+ * object and keep type safety.
  *
  * @see https://next-auth.js.org/getting-started/typescript#module-augmentation
- **/
+ */
 declare module "next-auth" {
   interface Session extends DefaultSession {
     user: {
@@ -32,11 +31,10 @@ declare module "next-auth" {
 }
 
 /**
- * Options for NextAuth.js used to configure adapters, providers, callbacks,
- * etc.
+ * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.
  *
  * @see https://next-auth.js.org/configuration/options
- **/
+ */
 export const authOptions: NextAuthOptions = {
   callbacks: {
     session({ session, user }) {
@@ -54,23 +52,22 @@ export const authOptions: NextAuthOptions = {
       clientSecret: env.DISCORD_CLIENT_SECRET,
     }),
     /**
-     * ...add more providers here
+     * ...add more providers here.
+     *
+     * Most other providers require a bit more work than the Discord provider. For example, the
+     * GitHub provider requires you to add the `refresh_token_expires_in` field to the Account
+     * model. Refer to the NextAuth.js docs for the provider you want to use. Example:
      *
-     * Most other providers require a bit more work than the Discord provider.
-     * For example, the GitHub provider requires you to add the
-     * `refresh_token_expires_in` field to the Account model. Refer to the
-     * NextAuth.js docs for the provider you want to use. Example:
      * @see https://next-auth.js.org/providers/github
-     **/
+     */
   ],
 };
 
 /**
- * Wrapper for `getServerSession` so that you don't need to import the
- * `authOptions` in every file.
+ * Wrapper for `getServerSession` so that you don't need to import the `authOptions` in every file.
  *
  * @see https://next-auth.js.org/configuration/nextjs
- **/
+ */
 export const getServerAuthSession = (ctx: {
   req: GetServerSidePropsContext["req"];
   res: GetServerSidePropsContext["res"];
diff --git a/src/utils/api.ts b/src/utils/api.ts
index abd6b01..f4f4ad5 100644
--- a/src/utils/api.ts
+++ b/src/utils/api.ts
@@ -1,9 +1,8 @@
 /**
- * This is the client-side entrypoint for your tRPC API.
- * It is used to create the `api` object which contains the Next.js
- * App-wrapper, as well as your type-safe React Query hooks.
+ * This is the client-side entrypoint for your tRPC API. It is used to create the `api` object which
+ * contains the Next.js App-wrapper, as well as your type-safe React Query hooks.
  *
- * We also create a few inference helpers for input and output types
+ * We also create a few inference helpers for input and output types.
  */
 import { httpBatchLink, loggerLink } from "@trpc/client";
 import { createTRPCNext } from "@trpc/next";
@@ -26,14 +25,14 @@ export const api = createTRPCNext<AppRouter>({
        * Transformer used for data de-serialization from the server.
        *
        * @see https://trpc.io/docs/data-transformers
-       **/
+       */
       transformer: superjson,
 
       /**
        * Links used to determine request flow from client to server.
        *
        * @see https://trpc.io/docs/links
-       * */
+       */
       links: [
         loggerLink({
           enabled: (opts) =>
@@ -58,12 +57,12 @@ export const api = createTRPCNext<AppRouter>({
  * Inference helper for inputs.
  *
  * @example type HelloInput = RouterInputs['example']['hello']
- **/
+ */
 export type RouterInputs = inferRouterInputs<AppRouter>;
 
 /**
  * Inference helper for outputs.
  *
  * @example type HelloOutput = RouterOutputs['example']['hello']
- **/
+ */
 export type RouterOutputs = inferRouterOutputs<AppRouter>;
diff --git a/tsconfig.json b/tsconfig.json
index b9e51f3..03ebb74 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -21,6 +21,13 @@
       "~/*": ["./src/*"]
     }
   },
-  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "**/*.cjs", "**/*.mjs"],
+  "include": [
+    ".eslintrc.cjs",
+    "next-env.d.ts",
+    "**/*.ts",
+    "**/*.tsx",
+    "**/*.cjs",
+    "**/*.mjs"
+  ],
   "exclude": ["node_modules"]
 }
