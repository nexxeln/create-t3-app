diff --git a/.env.example b/.env.example
index 89f2130..168cf5b 100644
--- a/.env.example
+++ b/.env.example
@@ -6,7 +6,7 @@
 # secrets in it. If you are cloning this repo, create a copy of this file named
 # ".env" and populate it with your secrets.
 
-# When adding additional environment variables, the schema in "/env/schema.mjs"
+# When adding additional environment variables, the schema in "/src/env.mjs"
 # should be updated accordingly.
 
 # Prisma
diff --git a/.eslintrc.cjs b/.eslintrc.cjs
new file mode 100644
index 0000000..db7fda4
--- /dev/null
+++ b/.eslintrc.cjs
@@ -0,0 +1,29 @@
+/** @type {import("eslint").Linter.Config} */
+module.exports = {
+  overrides: [
+    {
+      extends: [
+        "plugin:@typescript-eslint/recommended-requiring-type-checking",
+      ],
+      files: ["*.ts", "*.tsx"],
+      parserOptions: {
+        project: "tsconfig.json",
+      },
+    },
+  ],
+  parser: "@typescript-eslint/parser",
+  parserOptions: {
+    project: "./tsconfig.json",
+  },
+  plugins: ["@typescript-eslint"],
+  extends: ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"],
+  rules: {
+    "@typescript-eslint/consistent-type-imports": [
+      "warn",
+      {
+        prefer: "type-imports",
+        fixStyle: "inline-type-imports",
+      },
+    ],
+  },
+};
diff --git a/.eslintrc.json b/.eslintrc.json
deleted file mode 100644
index 82671df..0000000
--- a/.eslintrc.json
+++ /dev/null
@@ -1,22 +0,0 @@
-{
-  "overrides": [
-    {
-      "extends": [
-        "plugin:@typescript-eslint/recommended-requiring-type-checking"
-      ],
-      "files": ["*.ts", "*.tsx"],
-      "parserOptions": {
-        "project": "tsconfig.json"
-      }
-    }
-  ],
-  "parser": "@typescript-eslint/parser",
-  "parserOptions": {
-    "project": "./tsconfig.json"
-  },
-  "plugins": ["@typescript-eslint"],
-  "extends": ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"],
-  "rules": {
-    "@typescript-eslint/consistent-type-imports": "warn"
-  }
-}
diff --git a/package.json b/package.json
index acaffd1..1deae11 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
@@ -17,6 +17,7 @@
     "zod": "^3.20.2"
   },
   "devDependencies": {
+    "@types/eslint": "^8.21.1",
     "@types/node": "^18.11.18",
     "@types/prettier": "^2.7.2",
     "@types/react": "^18.0.26",
@@ -34,6 +35,6 @@
     "typescript": "^4.9.4"
   },
   "ct3aMetadata": {
-    "initVersion": "7.5.0"
+    "initVersion": "7.5.6"
   }
 }
diff --git a/src/env.mjs b/src/env.mjs
index 1ef2d08..126943c 100644
--- a/src/env.mjs
+++ b/src/env.mjs
@@ -1,9 +1,8 @@
-/* eslint-disable @typescript-eslint/ban-ts-comment */
 import { z } from "zod";
 
 /**
- * Specify your server-side environment variables schema here.
- * This way you can ensure the app isn't built with invalid env vars.
+ * Specify your server-side environment variables schema here. This way you can ensure the app isn't
+ * built with invalid env vars.
  */
 const server = z.object({
   DATABASE_URL: z.string().url(),
@@ -11,17 +10,17 @@ const server = z.object({
 });
 
 /**
- * Specify your client-side environment variables schema here.
- * This way you can ensure the app isn't built with invalid env vars.
- * To expose them to the client, prefix them with `NEXT_PUBLIC_`.
+ * Specify your client-side environment variables schema here. This way you can ensure the app isn't
+ * built with invalid env vars. To expose them to the client, prefix them with `NEXT_PUBLIC_`.
  */
 const client = z.object({
   // NEXT_PUBLIC_CLIENTVAR: z.string().min(1),
 });
 
 /**
- * You can't destruct `process.env` as a regular object in the Next.js
- * edge runtimes (e.g. middlewares) or client-side so we need to destruct manually.
+ * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.
+ * middlewares) or client-side so we need to destruct manually.
+ *
  * @type {Record<keyof z.infer<typeof server> | keyof z.infer<typeof client>, string | undefined>}
  */
 const processEnv = {
@@ -34,16 +33,21 @@ const processEnv = {
 // --------------------------
 
 const merged = server.merge(client);
-/** @type z.infer<merged>
- *  @ts-ignore - can't type this properly in jsdoc */
-let env = process.env;
+
+/** @typedef {z.input<typeof merged>} MergedInput */
+/** @typedef {z.infer<typeof merged>} MergedOutput */
+/** @typedef {z.SafeParseReturnType<MergedInput, MergedOutput>} MergedSafeParseReturn */
+
+let env = /** @type {MergedOutput} */ (process.env);
 
 if (!!process.env.SKIP_ENV_VALIDATION == false) {
   const isServer = typeof window === "undefined";
 
-  const parsed = isServer
-    ? merged.safeParse(processEnv) // on server we can validate all env vars
-    : client.safeParse(processEnv); // on client we can only validate the ones that are exposed
+  const parsed = /** @type {MergedSafeParseReturn} */ (
+    isServer
+      ? merged.safeParse(processEnv) // on server we can validate all env vars
+      : client.safeParse(processEnv) // on client we can only validate the ones that are exposed
+  );
 
   if (parsed.success === false) {
     console.error(
@@ -53,8 +57,6 @@ if (!!process.env.SKIP_ENV_VALIDATION == false) {
     throw new Error("Invalid environment variables");
   }
 
-  /** @type z.infer<merged>
-   *  @ts-ignore - can't type this properly in jsdoc */
   env = new Proxy(parsed.data, {
     get(target, prop) {
       if (typeof prop !== "string") return undefined;
@@ -66,8 +68,7 @@ if (!!process.env.SKIP_ENV_VALIDATION == false) {
             ? "❌ Attempted to access a server-side environment variable on the client"
             : `❌ Attempted to access server-side environment variable '${prop}' on the client`,
         );
-      /*  @ts-ignore - can't type this properly in jsdoc */
-      return target[prop];
+      return target[/** @type {keyof typeof target} */ (prop)];
     },
   });
 }
diff --git a/src/env/client.mjs b/src/env/client.mjs
deleted file mode 100644
index afe30a5..0000000
--- a/src/env/client.mjs
+++ /dev/null
@@ -1,34 +0,0 @@
-import { clientEnv, clientSchema } from "./schema.mjs";
-
-const _clientEnv = clientSchema.safeParse(clientEnv);
-
-export const formatErrors = (
-  /** @type {import('zod').ZodFormattedError<Map<string,string>,string>} */
-  errors,
-) =>
-  Object.entries(errors)
-    .map(([name, value]) => {
-      if (value && "_errors" in value)
-        return `${name}: ${value._errors.join(", ")}\n`;
-    })
-    .filter(Boolean);
-
-if (!_clientEnv.success) {
-  console.error(
-    "❌ Invalid environment variables:\n",
-    ...formatErrors(_clientEnv.error.format()),
-  );
-  throw new Error("Invalid environment variables");
-}
-
-for (let key of Object.keys(_clientEnv.data)) {
-  if (!key.startsWith("NEXT_PUBLIC_")) {
-    console.warn(
-      `❌ Invalid public environment variable name: ${key}. It must begin with 'NEXT_PUBLIC_'`,
-    );
-
-    throw new Error("Invalid public environment variable name");
-  }
-}
-
-export const env = _clientEnv.data;
diff --git a/src/env/schema.mjs b/src/env/schema.mjs
deleted file mode 100644
index d730707..0000000
--- a/src/env/schema.mjs
+++ /dev/null
@@ -1,37 +0,0 @@
-import { z } from "zod";
-
-/**
- * Specify your server-side environment variables schema here.
- * This way you can ensure the app isn't built with invalid env vars.
- */
-export const serverSchema = z.object({
-  NODE_ENV: z.enum(["development", "test", "production"]),
-});
-
-/**
- * You can't destruct `process.env` as a regular object in the Next.js
- * middleware, so you have to do it manually here.
- * @type {{ [k in keyof z.input<typeof serverSchema>]: string | undefined }}
- */
-export const serverEnv = {
-  NODE_ENV: process.env.NODE_ENV,
-};
-
-/**
- * Specify your client-side environment variables schema here.
- * This way you can ensure the app isn't built with invalid env vars.
- * To expose them to the client, prefix them with `NEXT_PUBLIC_`.
- */
-export const clientSchema = z.object({
-  // NEXT_PUBLIC_CLIENTVAR: z.string(),
-});
-
-/**
- * You can't destruct `process.env` as a regular object, so you have to do
- * it manually here. This is because Next.js evaluates this at build time,
- * and only used environment variables are included in the build.
- * @type {{ [k in keyof z.input<typeof clientSchema>]: string | undefined }}
- */
-export const clientEnv = {
-  // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,
-};
diff --git a/src/env/server.mjs b/src/env/server.mjs
deleted file mode 100644
index 050781a..0000000
--- a/src/env/server.mjs
+++ /dev/null
@@ -1,26 +0,0 @@
-/**
- * This file is included in `/next.config.mjs` which ensures the app isn't built with invalid env vars.
- * It has to be a `.mjs`-file to be imported there.
- */
-import { serverSchema, serverEnv } from "./schema.mjs";
-import { env as clientEnv, formatErrors } from "./client.mjs";
-
-const _serverEnv = serverSchema.safeParse(serverEnv);
-
-if (!_serverEnv.success) {
-  console.error(
-    "❌ Invalid environment variables:\n",
-    ...formatErrors(_serverEnv.error.format()),
-  );
-  throw new Error("Invalid environment variables");
-}
-
-for (let key of Object.keys(_serverEnv.data)) {
-  if (key.startsWith("NEXT_PUBLIC_")) {
-    console.warn("❌ You are exposing a server-side env-variable:", key);
-
-    throw new Error("You are exposing a server-side env-variable");
-  }
-}
-
-export const env = { ..._serverEnv.data, ...clientEnv };
diff --git a/src/pages/_app.tsx b/src/pages/_app.tsx
index adea8e0..d280cbd 100644
--- a/src/pages/_app.tsx
+++ b/src/pages/_app.tsx
@@ -1,6 +1,6 @@
 import { type AppType } from "next/dist/shared/lib/utils";
 
-import "../styles/globals.css";
+import "~/styles/globals.css";
 
 const MyApp: AppType = ({ Component, pageProps }) => {
   return <Component {...pageProps} />;
diff --git a/src/server/db.ts b/src/server/db.ts
index b724101..f3d7be3 100644
--- a/src/server/db.ts
+++ b/src/server/db.ts
@@ -1,6 +1,6 @@
 import { PrismaClient } from "@prisma/client";
 
-import { env } from "../env.mjs";
+import { env } from "~/env.mjs";
 
 const globalForPrisma = globalThis as unknown as { prisma: PrismaClient };
 
diff --git a/tsconfig.json b/tsconfig.json
index 9630df8..03ebb74 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -15,8 +15,19 @@
     "isolatedModules": true,
     "jsx": "preserve",
     "incremental": true,
-    "noUncheckedIndexedAccess": true
+    "noUncheckedIndexedAccess": true,
+    "baseUrl": ".",
+    "paths": {
+      "~/*": ["./src/*"]
+    }
   },
-  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "**/*.cjs", "**/*.mjs"],
+  "include": [
+    ".eslintrc.cjs",
+    "next-env.d.ts",
+    "**/*.ts",
+    "**/*.tsx",
+    "**/*.cjs",
+    "**/*.mjs"
+  ],
   "exclude": ["node_modules"]
 }
