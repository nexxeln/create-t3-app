diff --git a/.env.example b/.env.example
index cb15881..89f2130 100644
--- a/.env.example
+++ b/.env.example
@@ -1,9 +1,14 @@
-# Since .env is gitignored, you can use .env.example to build a new `.env` file when you clone the repo.
-# Keep this file up-to-date when you add new variables to `.env`.
+# Since the ".env" file is gitignored, you can use the ".env.example" file to
+# build a new ".env" file when you clone the repo. Keep this file up-to-date
+# when you add new variables to `.env`.
 
-# This file will be committed to version control, so make sure not to have any secrets in it.
-# If you are cloning this repo, create a copy of this file named `.env` and populate it with your secrets.
+# This file will be committed to version control, so make sure not to have any
+# secrets in it. If you are cloning this repo, create a copy of this file named
+# ".env" and populate it with your secrets.
+
+# When adding additional environment variables, the schema in "/env/schema.mjs"
+# should be updated accordingly.
 
-# When adding additional env variables, the schema in /env/schema.mjs should be updated accordingly
 # Prisma
-DATABASE_URL=file:./db.sqlite
+# https://www.prisma.io/docs/reference/database-reference/connection-urls#env
+DATABASE_URL="file:./db.sqlite"
diff --git a/.eslintrc.json b/.eslintrc.json
index 4cc0a95..82671df 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -1,4 +1,15 @@
 {
+  "overrides": [
+    {
+      "extends": [
+        "plugin:@typescript-eslint/recommended-requiring-type-checking"
+      ],
+      "files": ["*.ts", "*.tsx"],
+      "parserOptions": {
+        "project": "tsconfig.json"
+      }
+    }
+  ],
   "parser": "@typescript-eslint/parser",
   "parserOptions": {
     "project": "./tsconfig.json"
diff --git a/next.config.mjs b/next.config.mjs
index b5bef6c..ce181ca 100644
--- a/next.config.mjs
+++ b/next.config.mjs
@@ -1,4 +1,5 @@
 // @ts-check
+
 /**
  * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation.
  * This is especially useful for Docker builds.
@@ -8,7 +9,13 @@
 /** @type {import("next").NextConfig} */
 const config = {
   reactStrictMode: true,
-  swcMinify: true,
+
+  /**
+   * If you have the "experimental: { appDir: true }" setting enabled, then you
+   * must comment the below `i18n` config out.
+   *
+   * @see https://github.com/vercel/next.js/issues/41980
+   */
   i18n: {
     locales: ["en"],
     defaultLocale: "en",
diff --git a/package.json b/package.json
index 4922d5f..a334aa3 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
@@ -10,13 +10,13 @@
     "start": "next start"
   },
   "dependencies": {
-    "@prisma/client": "^4.8.0",
+    "@prisma/client": "^4.9.0",
     "@tanstack/react-query": "^4.20.0",
-    "@trpc/client": "^10.7.0",
-    "@trpc/next": "^10.7.0",
-    "@trpc/react-query": "^10.7.0",
-    "@trpc/server": "^10.7.0",
-    "next": "13.1.1",
+    "@trpc/client": "^10.9.0",
+    "@trpc/next": "^10.9.0",
+    "@trpc/react-query": "^10.9.0",
+    "@trpc/server": "^10.9.0",
+    "next": "13.1.6",
     "react": "18.2.0",
     "react-dom": "18.2.0",
     "superjson": "1.9.1",
@@ -31,15 +31,15 @@
     "@typescript-eslint/parser": "^5.47.1",
     "autoprefixer": "^10.4.7",
     "eslint": "^8.30.0",
-    "eslint-config-next": "13.1.1",
+    "eslint-config-next": "13.1.6",
     "postcss": "^8.4.14",
     "prettier": "^2.8.1",
     "prettier-plugin-tailwindcss": "^0.2.1",
-    "prisma": "^4.8.0",
+    "prisma": "^4.9.0",
     "tailwindcss": "^3.2.0",
     "typescript": "^4.9.4"
   },
   "ct3aMetadata": {
-    "initVersion": "7.0.2"
+    "initVersion": "7.4.1"
   }
 }
diff --git a/src/env/schema.mjs b/src/env/schema.mjs
index 45d3935..d883ade 100644
--- a/src/env/schema.mjs
+++ b/src/env/schema.mjs
@@ -10,6 +10,16 @@ export const serverSchema = z.object({
   NODE_ENV: z.enum(["development", "test", "production"]),
 });
 
+/**
+ * You can't destruct `process.env` as a regular object in the Next.js
+ * middleware, so you have to do it manually here.
+ * @type {{ [k in keyof z.input<typeof serverSchema>]: string | undefined }}
+ */
+export const serverEnv = {
+  DATABASE_URL: process.env.DATABASE_URL,
+  NODE_ENV: process.env.NODE_ENV,
+};
+
 /**
  * Specify your client-side environment variables schema here.
  * This way you can ensure the app isn't built with invalid env vars.
@@ -23,7 +33,7 @@ export const clientSchema = z.object({
  * You can't destruct `process.env` as a regular object, so you have to do
  * it manually here. This is because Next.js evaluates this at build time,
  * and only used environment variables are included in the build.
- * @type {{ [k in keyof z.infer<typeof clientSchema>]: z.infer<typeof clientSchema>[k] | undefined }}
+ * @type {{ [k in keyof z.input<typeof clientSchema>]: string | undefined }}
  */
 export const clientEnv = {
   // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,
diff --git a/src/env/server.mjs b/src/env/server.mjs
index 736e3a6..c04b5ae 100644
--- a/src/env/server.mjs
+++ b/src/env/server.mjs
@@ -3,10 +3,10 @@
  * This file is included in `/next.config.mjs` which ensures the app isn't built with invalid env vars.
  * It has to be a `.mjs`-file to be imported there.
  */
-import { serverSchema } from "./schema.mjs";
+import { serverSchema, serverEnv } from "./schema.mjs";
 import { env as clientEnv, formatErrors } from "./client.mjs";
 
-const _serverEnv = serverSchema.safeParse(process.env);
+const _serverEnv = serverSchema.safeParse(serverEnv);
 
 if (!_serverEnv.success) {
   console.error(
diff --git a/src/pages/api/trpc/[trpc].ts b/src/pages/api/trpc/[trpc].ts
index 70f0892..8ec828b 100644
--- a/src/pages/api/trpc/[trpc].ts
+++ b/src/pages/api/trpc/[trpc].ts
@@ -11,7 +11,9 @@ export default createNextApiHandler({
   onError:
     env.NODE_ENV === "development"
       ? ({ path, error }) => {
-          console.error(`❌ tRPC failed on ${path}: ${error}`);
+          console.error(
+            `❌ tRPC failed on ${path ?? "<no-path>"}: ${error.message}`,
+          );
         }
       : undefined,
 });
diff --git a/src/server/api/trpc.ts b/src/server/api/trpc.ts
index 81abfbd..595c8fa 100644
--- a/src/server/api/trpc.ts
+++ b/src/server/api/trpc.ts
@@ -1,20 +1,19 @@
 /**
  * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:
- * 1. You want to modify request context (see Part 1)
- * 2. You want to create a new middleware or type of procedure (see Part 3)
+ * 1. You want to modify request context (see Part 1).
+ * 2. You want to create a new middleware or type of procedure (see Part 3).
  *
- * tl;dr - this is where all the tRPC server stuff is created and plugged in.
- * The pieces you will need to use are documented accordingly near the end
+ * tl;dr - This is where all the tRPC server stuff is created and plugged in.
+ * The pieces you will need to use are documented accordingly near the end.
  */
 
 /**
  * 1. CONTEXT
  *
- * This section defines the "contexts" that are available in the backend API
- *
- * These allow you to access things like the database, the session, etc, when
- * processing a request
+ * This section defines the "contexts" that are available in the backend API.
  *
+ * These allow you to access things when processing a request, like the
+ * database, the session, etc.
  */
 import { type CreateNextContextOptions } from "@trpc/server/adapters/next";
 
@@ -24,64 +23,65 @@ type CreateContextOptions = Record<string, never>;
 
 /**
  * This helper generates the "internals" for a tRPC context. If you need to use
- * it, you can export it from here
+ * it, you can export it from here.
  *
  * Examples of things you may need it for:
- * - testing, so we dont have to mock Next.js' req/res
- * - trpc's `createSSGHelpers` where we don't have req/res
+ * - testing, so we don't have to mock Next.js' req/res
+ * - tRPC's `createSSGHelpers`, where we don't have req/res
+ *
  * @see https://create.t3.gg/en/usage/trpc#-servertrpccontextts
  */
-const createInnerTRPCContext = async (_opts: CreateContextOptions) => {
+const createInnerTRPCContext = (_opts: CreateContextOptions) => {
   return {
     prisma,
   };
 };
 
 /**
- * This is the actual context you'll use in your router. It will be used to
- * process every request that goes through your tRPC endpoint
- * @link https://trpc.io/docs/context
+ * This is the actual context you will use in your router. It will be used to
+ * process every request that goes through your tRPC endpoint.
+ *
+ * @see https://trpc.io/docs/context
  */
-export const createTRPCContext = async (_opts: CreateNextContextOptions) => {
-  return await createInnerTRPCContext({});
+export const createTRPCContext = (_opts: CreateNextContextOptions) => {
+  return createInnerTRPCContext({});
 };
 
 /**
  * 2. INITIALIZATION
  *
- * This is where the trpc api is initialized, connecting the context and
- * transformer
+ * This is where the tRPC API is initialized, connecting the context and
+ * transformer.
  */
 import { initTRPC } from "@trpc/server";
 import superjson from "superjson";
 
-const t = initTRPC
-  .context<Awaited<ReturnType<typeof createTRPCContext>>>()
-  .create({
-    transformer: superjson,
-    errorFormatter({ shape }) {
-      return shape;
-    },
-  });
+const t = initTRPC.context<typeof createTRPCContext>().create({
+  transformer: superjson,
+  errorFormatter({ shape }) {
+    return shape;
+  },
+});
 
 /**
  * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)
  *
  * These are the pieces you use to build your tRPC API. You should import these
- * a lot in the /src/server/api/routers folder
+ * a lot in the "/src/server/api/routers" directory.
  */
 
 /**
- * This is how you create new routers and subrouters in your tRPC API
+ * This is how you create new routers and sub-routers in your tRPC API.
+ *
  * @see https://trpc.io/docs/router
  */
 export const createTRPCRouter = t.router;
 
 /**
- * Public (unauthed) procedure
+ * Public (unauthenticated) procedure
  *
  * This is the base piece you use to build new queries and mutations on your
  * tRPC API. It does not guarantee that a user querying is authorized, but you
- * can still access user session data if they are logged in
+ * can still access user session data if they are logged in.
  */
 export const publicProcedure = t.procedure;
diff --git a/src/server/db.ts b/src/server/db.ts
index 5df917c..038504d 100644
--- a/src/server/db.ts
+++ b/src/server/db.ts
@@ -2,18 +2,13 @@ import { PrismaClient } from "@prisma/client";
 
 import { env } from "../env/server.mjs";
 
-declare global {
-  // eslint-disable-next-line no-var
-  var prisma: PrismaClient | undefined;
-}
+const globalForPrisma = globalThis as unknown as { prisma: PrismaClient };
 
 export const prisma =
-  global.prisma ||
+  globalForPrisma.prisma ||
   new PrismaClient({
     log:
       env.NODE_ENV === "development" ? ["query", "error", "warn"] : ["error"],
   });
 
-if (env.NODE_ENV !== "production") {
-  global.prisma = prisma;
-}
+if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;
diff --git a/src/utils/api.ts b/src/utils/api.ts
index c99a366..9e0c7b2 100644
--- a/src/utils/api.ts
+++ b/src/utils/api.ts
@@ -1,7 +1,7 @@
 /**
  * This is the client-side entrypoint for your tRPC API.
- * It's used to create the `api` object which contains the Next.js App-wrapper
- * as well as your typesafe react-query hooks.
+ * It is used to create the `api` object which contains the Next.js
+ * App-wrapper, as well as your type-safe React Query hooks.
  *
  * We also create a few inference helpers for input and output types
  */
@@ -18,20 +18,20 @@ const getBaseUrl = () => {
   return `http://localhost:${process.env.PORT ?? 3000}`; // dev SSR should use localhost
 };
 
-/**
- * A set of typesafe react-query hooks for your tRPC API
- */
+/** A set of type-safe react-query hooks for your tRPC API. */
 export const api = createTRPCNext<AppRouter>({
   config() {
     return {
       /**
-       * Transformer used for data de-serialization from the server
+       * Transformer used for data de-serialization from the server.
+       *
        * @see https://trpc.io/docs/data-transformers
        **/
       transformer: superjson,
 
       /**
-       * Links used to determine request flow from client to server
+       * Links used to determine request flow from client to server.
+       *
        * @see https://trpc.io/docs/links
        * */
       links: [
@@ -47,19 +47,23 @@ export const api = createTRPCNext<AppRouter>({
     };
   },
   /**
-   * Whether tRPC should await queries when server rendering pages
+   * Whether tRPC should await queries when server rendering pages.
+   *
    * @see https://trpc.io/docs/nextjs#ssr-boolean-default-false
    */
   ssr: false,
 });
 
 /**
- * Inference helper for inputs
+ * Inference helper for inputs.
+ *
  * @example type HelloInput = RouterInputs['example']['hello']
  **/
 export type RouterInputs = inferRouterInputs<AppRouter>;
+
 /**
- * Inference helper for outputs
+ * Inference helper for outputs.
+ *
  * @example type HelloOutput = RouterOutputs['example']['hello']
  **/
 export type RouterOutputs = inferRouterOutputs<AppRouter>;
